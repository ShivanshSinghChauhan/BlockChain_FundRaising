pragma solidity ^0.4.24;

contract FundRaising{
    mapping(address=>uint) public contributors;
    address public admin;
    uint public noOfContributors;
    uint public minimumContribution;
    uint public deadline; // this is a timestamp (seconds)
    uint public goal;
    uint public raisedAmount = 0;
    
    struct Request{
        string description;
        address recipient;
        uint value;
        bool completed;
        uint noOfVoters;
        mapping(address => bool) voters;
    }
    
    //Made an array of struct Request to store varios requests. 
    Request[] public requests;
    
    // For our Web Page we can see how many payments have been made or how many requests have been created by th owner
    // Its a good practise for every smart contract 
    // logs/event all the transaction history 
    event ContributeEvent(address sender, uint value);
    event CreateRequestEvent(string _description, address _recipient, uint _value);
    event makePaymentEvent(address recipient, uint value);
    
    constructor(uint _goal, uint _deadline) public{
        goal = _goal;
        deadline = now + _deadline;
        
        admin =  msg.sender;
        minimumContribution = 10;
    }
    
    modifier onlyAdmin(){
        require(msg.sender == admin);
        _;
    }
    
    function contribute() public payable{
        require(now < deadline);
        require(msg.value >= minimumContribution);
        
        if(contributors[msg.sender] == 0){
            noOfContributors++;
        }
        
        contributors[msg.sender] += msg.value;
        raisedAmount += msg.value;
        
        //emit mtlb event/log me save kar de rha h
        emit ContributeEvent(msg.sender, msg.value);
        
    }
    
    //There will be refund if:
    // Goal is not met 
    // Deadline not met
    
    
    function getRefund() public{
        require(now > deadline);
        require(raisedAmount < goal);
        require(contributors[msg.sender] > 0);
        
        address recipient = msg.sender;
        uint value =  contributors[msg.sender];
        
        recipient.transfer(value);
        contributors[msg.sender] = 0; // it will give the value zero so that no one can take refund again
    }
    
    function createRequest(string _description, address _recipient, uint _value) public onlyAdmin{
        // It will store in the memory rather being storage(blockchain) Basically blockchain p ni rahega
        Request memory newRequest = Request({
            description: _description,
            recipient: _recipient,
            value: _value,
            completed: false,
            noOfVoters: 0
        });
        
        emit CreateRequestEvent( _description,  _recipient,  _value);
    }
    
    // We work directly on element of the array saved in the storage(blockchain). This is not a copy
    function voteRequest(uint index) public{
        Request storage thisRequest = requests[index];
        
        require(contributors[msg.sender] > 0);
        require(thisRequest.voters[msg.sender] == false); // because false means the voter hasn't votes yet
        
        thisRequest.voters[msg.sender] = true;
        thisRequest.noOfVoters++;
    }
    
    function makePayment(uint index) public onlyAdmin{
        Request storage thisRequest = requests[index];
        require(thisRequest.completed == false);
        
        require(thisRequest.noOfVoters > noOfContributors/2); // more than 50% voted
        thisRequest.recipient.transfer(thisRequest.value); //transfer money to the recipient
        
        thisRequest.completed = true;
        
        emit makePaymentEvent( thisRequest.recipient,  thisRequest.value);
    }
    
    
}
